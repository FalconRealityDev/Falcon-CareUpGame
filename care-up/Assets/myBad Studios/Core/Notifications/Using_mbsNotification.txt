How to use mbsNotification
==========================

In an effort to make this work with zero setup I have hardcoded the name of the prefab
so first of all, do not change the prefab name. Feel free to customise the look and 
layout to fit your needs but do NOT rename it.

To show the notification is just one line of code:
	mbsNotification.SpawnInstance();
	
It is a static function so you can call it from absolutely anywhere at any time.
It takes a number of arguments but also has 2 settings to set in the inspector.

In the inspector you need to set the time_to_live variable which is set to 1.5 by default.
This field indicates how long to show the notification before sliding it back out again.
Secondly is the curve. The curve determines how fast or slow the animation occurs. 
The animation moves along the path of the curve but only uses 0 to 1 on the curve so
make sure that your curve starts at exactly 0 and ends at exactly 1 and with a value of 1
if you want the animation values to match the values you pass the function.

The function takes the following arguments:
	canvas: This is very important. If you don't give it a canvas to show on it won't show
	origin: A Vector2 that says where on the screen the notification must slide in from*
	destination: A Vector2 that says where on the screen the notification should stop
	header: The text to show in the header section
	message: The notification to show
	icon: Optionally tell it to show an icon in the header if you want to
	
*Note that the pivot point is set to top right by default so origin and destination sets
the screen location of the top right corner of the notification.
	
And that is that. Set the two values on the prefab and then use that one line of code to 
show a notification whenever you want. Notifications are queued so you can call it 
multiple times and see multiple messages without it overlapping of hogging the screen.

This function can be called from anywhere so you don't have to create components that go 
onto a canvas in order to use the notifications. You just need to pass it a canvas object
when you call it.

mbsEvent Functions
------------------
static public mbsNotification SpawnInstance(
	Canvas canvas, 
	Vector2 origin, 
	Vector2 destination, 
	string header, 
	string message, 
	Sprite icon = null)