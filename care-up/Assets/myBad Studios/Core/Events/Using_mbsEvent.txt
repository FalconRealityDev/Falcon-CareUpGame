How to use mbsEvent
==========================

Most of my products are taking an event driven approach and will need custom
events to be defined. mbsEvent uses a CML variable to contain any data the event
needs to pass and thus is flexible enough to be used by all my current and future
event driven projects. Just to be extra safe I also allow for a generic object
to be included in the event also, ensuring a universal event.

I will be releasing free code samples on my website at a later point in time and
these code samples will assume that MBSCore is assumed and by adding mbsEvent to
MBSCore it means I will be able to use events in my code samples.
(See www.guild.site/learn/ for more info)

To use mbsEvent in your own functions, simply create an instance of the variable like so:
	mbsEvent my_data = new mbsEvent();
	
This will create an empty mbsEvent containing only a single node of type "details".
Alternatively, you can specify a value to be assigned to a field called "value" like so:

	mbsEvent my_data = new mbsEvent(1);
	
"value" has a special meaning in CMLData and thus you can fetch the value without
specifying the name of the variable. I.e. my_data.details[0].Int()

If, for whatever reason you want to specify a different name for the field, you can:

	mbsEvent my_data = new mbsEvent(1, "other_name");
	
You can now access the value like so: my_data.details[0].Int("other_name"). Also, if,
for some reason you want to change the data type of the container you can do that also:

	mbsEvent my_data = new mbsEvent(1, "other_name", "my_type");

Accessing the field now is still done exactly the same as when using an array index.
To view the data type just fetch it like normal using my_data.details[0].data_type;

In most cases you will only need to send one piece of data and thus the above should
serve you well in most cases. If, however, you already have an existing CML object
and want to pass the entire CML variable as a parameter, that too is allowed. Since
everything above generates the CML object, passing in your own CML object means you
don't need to pass any extra parameters. Just do it like so:

	CML myData = new CML();
	mbsEvent my_data = new mbsEvent(myData);

Finally, in both formats you also have the option of passing an actual object instead
of just CMLData. Simply add the object you want to include as the final parameter like so:

	CML myData = new CML();
	mbsEvent my_data = new mbsEvent(myData, this);
	mbsEvent my_data = new mbsEvent(1, "other_name", "my_type", transform);
	
This can then be fetched via the public object variable named event_object:
	(my_data.event_object as Transform).position = Vector3.zero;
	
Event Declaration
------------------
public delegate void mbsEventHandler(object source, mbsEvent e)

mbsEvent Constructors
------------------
public mbsEvent(CML data = null, object obj = null)
public mbsEvent(int value, string field="value", string type = "details", object obj = null)

mbsEvent Variables List
------------------
public CML details;
public object event_object;
